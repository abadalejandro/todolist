{"version":3,"sources":["reportWebVitals.ts","reducer/todoReducer.tsx","components/TodoListItem.tsx","components/TodoList.tsx","components/TodoAdd.tsx","hooks/useForm.tsx","components/TodoApp.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","idx","handleToggle","handleDelete","className","onClick","desc","TodoList","todos","TodoAdd","handleAddTodo","initialState","useState","values","setValues","target","name","value","useForm","description","handleInputChange","reset","onSubmit","e","preventDefault","trim","newTodo","Date","getTime","placeholder","autoCapitalize","onChange","init","localStorage","getItem","length","JSON","parse","TodoApp","useReducer","dispatch","useEffect","setItem","stringify","todoId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64a5536c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ITodo } from '../interfaces/interfaces';\n\nexport const todoReducer = (state: ITodo[] = [], action: any) => {\n    switch (action.type) {\n        case 'add':\n            return [\n                ...state,\n                action.payload\n            ];\n        case 'delete':\n            return state.filter(todo => todo.id !== action.payload)\n        \n        case 'toggle':\n            return state.map(todo=>\n                (todo.id === action.payload)\n                    ? {...todo, done: !todo.done}\n                    : todo\n                );    \n\n\n        case 'toggle-old':\n            return state.map(todo => {\n                if (todo.id === action.payload) {\n                    return {\n                        ...todo,\n                        done: !todo.done\n                    }\n                } else {\n                    return todo;\n                }\n            });\n\n        default:\n            return state;\n    }\n}\n","import { ITodo } from '../interfaces/interfaces';\n\ninterface IProps {\n    todo:ITodo,\n    idx:number,\n    handleToggle:Function,\n    handleDelete:Function,\n}\n\n\nexport const TodoListItem = ({todo, idx, handleToggle, handleDelete}:IProps) => {\n    return (\n        <li key={todo.id} className=\"list-group-item\">\n            <p className={`${todo.done && 'complete'}`} onClick={() => handleToggle(todo.id)} >{idx + 1} - {todo.desc}</p>\n            <button className=\"btn btn-danger\" onClick={() => handleDelete(todo.id)}>Delete</button>\n        </li>\n    )\n}\n\n\n","import { ITodo } from '../interfaces/interfaces';\nimport { TodoListItem } from './TodoListItem';\n\nexport const TodoList = ({ todos, handleDelete, handleToggle }:any) => {\n    return (\n        <ul className=\"list-group list-group-flush\" >\n            {\n                todos.map((todo:ITodo, idx:number) => (\n                   <TodoListItem key={todo.id} todo={todo} idx={idx} handleToggle={handleToggle} handleDelete={handleDelete} />\n                ))\n            }\n        </ul>\n    )\n}\n\n\n","import { useForm } from '../hooks/useForm';\nimport { ITodo } from '../interfaces/interfaces';\n\ninterface IProps {\n    handleAddTodo: Function,\n}\n\nexport const TodoAdd = ({ handleAddTodo }: IProps) => {\n    const [{ description }, handleInputChange, reset] = useForm({ description: '' });\n\n    const handleSubmit = (e: React.FormEvent<EventTarget>) => {\n        e.preventDefault();\n        if (!description.trim()) return;\n\n        const newTodo: ITodo = {\n            id: new Date().getTime(),\n            desc: description,\n            done: false,\n        };\n\n        handleAddTodo(newTodo);\n        reset();\n    }\n\n    return (\n        <>   \n            <form onSubmit={handleSubmit} className=\"d-grid gap-2\">\n                <input className=\"form-control\" value={description} type=\"text\" name=\"description\" placeholder=\"Write here and press enter key...\" autoCapitalize=\"off\" onChange={handleInputChange} />\n                {/* <button type=\"submit\" className=\"btn btn-outline-primary mt-1\" >Add</button> */}\n            </form>\n        </>\n    )\n}\n","import { useState } from 'react';\n\n\nexport const useForm = (initialState = {}):any => {\n    const [values, setValues] = useState(initialState);\n\n    const reset = () => {\n        setValues(initialState);\n    };\n\n    const handleInputChange = ({target}:any):void => {\n        setValues({\n            ...values,\n            [target.name]: target.value\n        });\n    }\n\n    return [values, handleInputChange, reset];\n    \n}\n","import { useReducer, useEffect } from 'react';\nimport { ITodo, IAction } from '../interfaces/interfaces';\nimport { todoReducer } from '../reducer/todoReducer';\nimport { TodoList } from './TodoList';\nimport { TodoAdd } from './TodoAdd';\nimport './TodoApp.css';\n\nconst init = (): ITodo[] | [] => {\n  const todos: any = localStorage.getItem('todos') || [];\n  if (todos.length <= 0) {\n    return [];\n  } else {\n    return JSON.parse(todos);\n  }\n}\n\nexport const TodoApp = () => {\n  const [todos, dispatch] = useReducer(todoReducer, [], init);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n\n  }, [todos])\n\n\n  const handleDelete = (todoId: number) => {\n    if (!todoId) return;\n\n    const action: IAction = {\n      type: 'delete',\n      payload: todoId\n    };\n\n    dispatch(action);\n  }\n\n  const handleToggle = (todoId: number) => {\n    dispatch({\n      type: 'toggle',\n      payload: todoId\n    });\n  }\n\n  const handleAddTodo = (newTodo: ITodo) => {\n    const action: IAction = {\n      type: 'add',\n      payload: newTodo\n    };\n\n    dispatch(action);\n  }\n\n  return (\n    <div className=\"d-flex justify-content-center container pt-sm-2\">\n      <div id=\"container\" className=\"w-75\">\n\n        <div className=\"row sticky-top bg-warning bg-gradient border border-1 p-2 rounded-2\">\n\n          <div className=\"col-12 col-sm-6 \">\n            <h1 className=\"text-left\">\n              TodoList\n              <span className=\"badge bg-danger rounded-pill\">{todos.length}</span>\n            </h1>\n          </div>\n\n          <div className=\"col-12 col-sm-6 pt-2\">\n            <TodoAdd handleAddTodo={handleAddTodo} />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <TodoList todos={todos} handleDelete={handleDelete} handleToggle={handleToggle} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { TodoApp } from './components/TodoApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}